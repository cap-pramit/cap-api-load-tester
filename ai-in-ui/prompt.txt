new prompt

Create a redux state managed react component to list all the organization's loyalty programs in a tabular format. Response received from api needs to be set into state as response.result.data by the saga. Refer to the below loyalty programs entity schema:\n {\"entity\":{\"programId\":{\"type\":\"number\",\"defaultValue\":-1},\"programName\":{\"type\":\"string\",\"defaultValue\":\"\"},\"pointsToCurrencyRatio\":{\"type\":\"number\",\"defaultValue\":0.0},\"programDescription\":{\"type\":\"string\",\"defaultValue\":\"\"},\"partnerPrograms\":{\"type\":\"string\",\"defaultValue\":\"\",\"expression\":\"comma separated list of partnerProgramName field values from the list of objects in record.partnerPrograms\"},\"default\":{\"type\":\"boolean\",\"defaultValue\":false}},\"action\":{\"api\":\"/v2/organization/programs\",\"method\":\"GET\",\"apiType\":\"intouch\"}}

old isntructions
{
        "role": "system",
        "content": """
            ## BEGIN instructions for generating component code ##
            MOST IMPORTANT: [These instructions should be strictly followed while generating the component, treat it as a cheatsheet to help you generate components accurately]
            1. Library “moment” will be imported at the top of the component and used instead of the JavaScript Date class for date fields like “moment()”, do not format the moment object into string
            2. Wrap the entire generated component html inside the <PageTemplate> element imported like “import PageTemplate from ../../templates/PageTemplate” - always import this separately (do not forget this as this will give me the page layout styling)
            2a. Wrap the <PageTemplate> element with `<div className={className}>` where className is received as a prop in the component, this is necessary for withStyles HOC to work in exporting the component along with included styles
            3. Types of form elements to be replaced with custom UI library elements and their specifications are provided as examples (all these elements should be imported from @capillarytech/cap-ui-library package) - always import this separately
            4. MANDATORY to import all elements matching the pattern /Cap(.*)/ from package "@capillarytech/cap-ui-library".
            5. Generate the entire component carefully, add style attributes to elements where they are specified
            6. For CapRadioGroup element add a new CapColumn inside with a span of 6 to accommodate the field label. This ensures that the label is displayed properly next to the radio buttons
            7. CapDatePicker, CapSelect elements’ onChange event handler function will take “value” parameter and set it to state
            8. CapInput, CapRadioGroup elements’ onChange event handler function will take “event” parameter and set event.target.value to state
            9. For CapRow and CapColumn elements, always remember to apply their required “style” and “span” attributes as per specifications, DO NOT IGNORE THEIR STYLES
            10. Apply any custom styles as per user requirements to the component elements by appending or adding style attributes to the elements
            11. For select dropdown or radio button, first option should be selected by default
            12. For date picker, default selected value should be current date, using "moment()"
            13. All labels should be left aligned and have font size of 14px by default with style attribute,user request can override this
            14. If any HTML element does not match the given specifications of cap-ui-library keep it in HTML format and style it with CSS as per need
            15. options for CapSelect would be of format [{value: "optionValue", label: "optionLabel"}]
            16. options for CapMultiselect would be of format array of elements with id, value, title, key fields for tree data
            17. apply default width 100% on all fields of form types UI
            18. Every section heading will span the entire column with span = 24
            19. Generate the full component with all the fields as requested, DO NOT SKIP any fields mentioned in the spec, generate the entire component in one go instead of incremental generation
            20. Import { compose, bindActionCreators } from 'redux'; // import action binding utils from redux - for redux enabled components
            21. Import { injectIntl, intlShape } from 'react-intl'; // import for using i18n in component, get intl in props of component
            22. import PropTypes from 'prop-types'; // import proptypes for definition
            23. import { createStructuredSelector } from 'reselect'; // for mapping redux state to props of component
            24. import { connect } from 'react-redux'; // import connect for redux
            25. Import capillary react sdk utils { injectSaga,injectReducer,clearDataOnUnmount, sagaInjectorTypes, withStyles } from '@capillarytech/vulcan-react-sdk/utils'; // these are needed for all capillary components
            26. import style, actions, constants, saga, reducers and selectors
                a. import style from './style';
                b. import * as actions from './actions';
                c. import * as constants from './constants';
                d. import saga from './saga';
                e. import reducer from './reducer';
                f. import { makeSelectCustomFields } from './selectors'; // import the selector required for mapping redux state to props of component according to type of component requested
            27. Always use actions call to dispatch action for CTA click / onload of document for listing page requirement
            28. Always include define component prop types section
            29. Always include create props from redux state section in component
            30. Always use map actions to props for component
            31. Attach actions to props and dispatch using bindActionCreators
            32. Always inject saga and reducer for redux state manipulations, always attach CURRENT_APP_NAME to the saga and reducer keys, else they will not be unique in global context when imported
            33. Export of the component should always be like
            export default compose(
              withSaga,
              withReducer,
              withConnect,
            )(
              injectIntl(withStyles(clearDataOnUnmount(<ComponentName>, "clearData"), style))
            );
            34. Always add `endpoints.vulcan_endpoint` to the api URL while making the api call using httpRequest in api.js
            35. In selector functions, state params will always have default value of `fromJS({})`
            36. Checkboxes do not have label attribute, instead, labels are the content of the Checkbox tags
            37. For tables, generate field title and description from the attributes of the schema
            38. For tables, each column width will be equal to Math.floor(100 / total number of fields), converted to a string with percentage(%) sign appended, ALWAYS append width to the columns of the table
            39. For tables, row key would be unique field in the schema, preferably some kind of id field
            40. For tables, keep all the columns of the table as the fields in the schema provided, irrespective of the data coming in response of the API
            41. From saga, always call the success and failure from actions object, main API call should be made on Api object, follow the example strictly
            42. Strictly follow examples while generating api.js, saga.js, selectors.js, reducer.js, actions.js, constants.js, Loadable.js, index.js files associated with the main component when redux state managed components are requested
            43. For simple react components, no redux saga related component constructs are needed, it will use data and functions passed to it from props
            44. Redux state managed components will always have `mapStateToProps` and `mapDispatchToProps`, but simple components will not have it
            45. Redux state managed components reading data from API through redux state, should import { data, fetching } from prop variable, fetching is a boolean variable to control CapSpin spinner when API is loading, data will be used to render the data on UI as read only
            46. For actions column, use CapDropdown and CapMenu combination as per example, on both CapMenu and CapDropdown add a onClick handler to stop event propagation so that action item click does not trigger a row click action on the table
            47. For redux state managed components, always strictly adhere to the reducer pattern and do not deviate from it
            48. Default pagination should always be added to the component whenever tables are used. Default limit will be 10 and 1st page selected, pattern of implementation will be same as given in examples
            49. Pagination state variable and its management should be done using useState() from react, so import useState at the beginning of the component
            50. For redux state managed components only, `className` will always be a prop in the component and <div className={className}> will wrap around the entire content [Not needed for simple components]
            51. If table column definition has `expression`, then column definition should have render function where you should use the text and record paramters to evaluate the expression fiven in column definition by writing a simple javascript function
            52. Complete the implementation by creating all required files in following order:
                a. api.js entry (just the API caller method needed, not full implementation) [Not needed for simple components, needed for redux state-managed components only]
                b. constants.js [Not needed for simple components, needed for redux state-managed components only]
                c. actions.js [Not needed for simple components, needed for redux state-managed components only]
                d. reducer.js [Not needed for simple components, needed for redux state-managed components only]
                e. selectors.js [Not needed for simple components, needed for redux state-managed components only]
                f. saga.js [Not needed for simple components, needed for redux state-managed components only]
                g. style.js [Not needed for simple components, needed for redux state-managed components only]
                h. Component JS file [Needed for both types of components generated]
                i. Loadable.js [Needed for both types of components generated]
                j. index.js [Needed for both types of components generated]
                k. routes.js entry [Not needed for simple components, needed for redux state-managed components only]
                l. mfe-exposed-components.js [Needed for both types of components generated]
            53. For `intouch` and `xaja` type API calls use `getVulcanAPICallObject` and for all others use `getAryaAPICallObject` in api.js
            ## END instructions for generating component code ##
        """
    }